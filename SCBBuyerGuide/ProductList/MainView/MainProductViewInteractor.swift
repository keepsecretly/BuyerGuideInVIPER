//
//  MainProductViewInteractor.swift
//  SCBBuyerGuide
//
//  Created NiM on 5/27/2561 BE.
//  Copyright © 2561 NiM. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class MainProductViewInteractor: MainProductViewInteractorProtocol {    

    weak var presenter: MainProductViewPresenterProtocol?
    
    lazy var controllerList:[ProductListViewController]? = {
        if let allProductViewController = StoryBoardHelper.getAllProductListController(),
            let favoriteProductViewController = StoryBoardHelper.getFavoriteListController(){
            
            allProductViewController.delegate = self
            favoriteProductViewController.delegate = self
            
            return [allProductViewController, favoriteProductViewController]
        }
        
        return nil
    }()    
    
    func getIndex(for controller:UIViewController? = nil) -> Int? {
        
        if let productListViewController = controller as? ProductListViewController,
            let index = self.controllerList?.index(of: productListViewController) {
            return index
        }
        
        return nil
    }
    
    func isLowerBound(_ index: Int) -> Bool {
        return (index < (self.controllerList?.count ?? 0) - 1)
    }
    
    func requestPage(at index:Int) -> UIViewController? {
        if index < (self.controllerList?.count ?? 0) {
            return self.controllerList?[index]
        }
        
        return nil
    }
}

extension MainProductViewInteractor : ProductListViewDelegate {
    
    func producListErrorOccur(reason:String) {
        self.presenter?.showAlert(message: reason)
    }
    
    func producListRequestUpdate() {
        self.presenter?.producListRequestUpdate()
    }
    
    func producListDidSelectItem(item:Product) {
        self.presenter?.showProductDetail(for: item)
    }
    
    func producListDidSelectFavorite(for item:Product, selected: Bool) {
        let action:FavoriteAction = (selected ? .add : .remove)
        
        // Update All product list, if action == remove
        if let productListViewController = self.requestPage(at: 0) as? AllProductListViewController, action == .remove {
            productListViewController.presenter?.favoriteShouldRemove(item: item)
            productListViewController.needUpdate = true
        }
        
        // Add / Remove at Favorite list
        if let favoriteViewController = self.requestPage(at: 1) as? FavoriteViewController {
            if action == .add {
                favoriteViewController.shouldUpdateList(with: item)
            } else {
                favoriteViewController.shouldRemove(item)
            }
        }
    }
}
