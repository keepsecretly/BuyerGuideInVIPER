//
//  ProductListInteractor.swift
//  SCBBuyerGuide
//
//  Created NiM on 5/27/2561 BE.
//  Copyright © 2561 NiM. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class ProductListInteractor: ProductListInteractorProtocol {

    weak var presenter: ProductListPresenterProtocol?
    
    lazy var dataSource:ProductListDataSource = {
        return ProductListDataSource()
    }()

    func reloadData(sortOption:SortOption = .id, forceUpdate:Bool = false) {
        self.dataSource.reloadData(sortOption: sortOption, forceUpdate: forceUpdate)
    }
    
    func requestProductList(completion:@escaping ((_ itemList:[Product]?, _ errorMessage:String?) -> Void)) {
        let request = APIProductList()
        request.requestWithHandler { [weak self]  (response) in
            if let error = response.error {
                completion(nil, error.localizedDescription)
            } else  if let productList = (response as? APIProductListResponse)?.productList {
                
                if let dataSource = self?.dataSource {
                    dataSource.itemList = productList
                    dataSource.reloadData(sortOption: dataSource.sortOption)
                }
                
                completion(productList, nil)
            }
        }
    }
    
    func favoriteButtonDidSelect(at index: Int, selected: Bool) -> Product {
        self.dataSource.itemList[index].isFavorited = selected
        return self.dataSource.itemList[index]
    }
    
    func favoriteShouldRemove(item: Product) {
        if let index = self.getIndex(for: item) {
            self.dataSource.itemList[index].isFavorited = false
        }
    }
    
    func getItem(at index:Int) -> Product {
        return self.dataSource.itemList[index]
    }
    
    func getIndex(for item: Product) -> Int? {
        return self.dataSource.itemList.index(of: item)
    }
}
